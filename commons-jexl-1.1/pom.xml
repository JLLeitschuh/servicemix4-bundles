<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <!--

        Licensed to the Apache Software Foundation (ASF) under one or more
        contributor license agreements.  See the NOTICE file distributed with
        this work for additional information regarding copyright ownership.
        The ASF licenses this file to You under the Apache License, Version 2.0
        (the "License"); you may not use this file except in compliance with
        the License.  You may obtain a copy of the License at

           http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
    -->

    <modelVersion>4.0.0</modelVersion>

    <parent>
      <groupId>org.apache.servicemix.bundles</groupId>
      <artifactId>bundles-pom</artifactId>
      <version>4</version>
    </parent>

    <groupId>org.apache.servicemix.bundles</groupId>
    <artifactId>org.apache.servicemix.bundles.commons-jexl</artifactId>
    <version>1.1_5-SNAPSHOT</version>
    <packaging>bundle</packaging>
    <name>Apache ServiceMix :: Bundles :: ${pkgArtifactId}</name>
    <description>
        SYNOPSIS
            This OSGi bundle wraps ${pkgArtifactId} ${pkgVersion} jar file.

        DESCRIPTION
            JEXL is a library intended to facilitate the implementation of dynamic and scripting features in
            applications and frameworks.

            It is a small footprint "glueing" API - the core features fit in 3 classes and 10 methods - that can be used
            in various conditions:

            * Module or component configuration:
                o Your application has configuration files (eventually generated by a design module) consumed by the
                  end-user module that would benefit from variables and expressions.
                o When it would be convenient to use IOC but overall complexity doesn't require (or can't depend upon)
                  a full-blown library (Spring, Guice...).
            * Loose-coupling of interfaces and implementations or duck-typing:
                o You have optional classes that your code cant consider as compilation dependencies.
                o You have to integrate and call "legacy" code or use components that you dont want to strongly depend
                  upon.
            * Basic scripting features:
                o Your application lets (advanced) users evaluate or define some simple expressions like computation
                  formulas.
            * Simple template capabilities:
                o Your application has basic template requirements and JSPs or Velocity would be overkill or too
                  inconvenient to deploy.

            Its name stands for Java EXpression Language, a simple expression language inspired by Apache Velocity and
            the Expression Language defined in the JavaServer Pages Standard Tag Library version 1.1 (JSTL) and
            JavaServer Pages version 2.0 (JSP). JEXL 2.0 adds features inspired by Unified EL.

            The API and the expression language exploit Java-beans naming patterns through introspection to expose
            property getters and setters. It also considers public class fields as properties and allows to invoke any
            accessible method.

            JEXL attempts to bring some of the lessons learned by the Velocity community about expression languages in
            templating to a wider audience. Commons Jelly needed Velocity-ish method access, it just had to have it.

            It must be noted that JEXL is not a compatible implementation of EL as defined in JSTL 1.1 (JSR-052) or
            JSP 2.0 (JSR-152). For a compatible implementation of these specifications, see the Commons EL project.

        SEE ALSO
            http://commons.apache.org/jexl/
    </description>

    <properties>
        <pkgGroupId>commons-jexl</pkgGroupId>
        <pkgArtifactId>commons-jexl</pkgArtifactId>
        <pkgVersion>1.1</pkgVersion>
        <servicemix.osgi.export.pkg>
            org.apache.commons.jexl
        </servicemix.osgi.export.pkg>
        <servicemix.osgi.import.pkg>
            !org.apache.commons.jexl*,
            org.apache.commons.logging*;version="[1.0,2)",
            junit*;version="[3.8.1,4)";resolution:=optional,
            *
        </servicemix.osgi.import.pkg>
    </properties>

    <dependencies>
        <dependency>
            <groupId>${pkgGroupId}</groupId>
            <artifactId>${pkgArtifactId}</artifactId>
            <version>${pkgVersion}</version>
            <optional>true</optional>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <artifactSet>
                                <includes>
                                    <include>${pkgGroupId}:${pkgArtifactId}</include>
                                </includes>
                            </artifactSet>
                            <filters>
                                <filter>
                                    <artifact>${pkgGroupId}:${pkgArtifactId}</artifact>
                                    <excludes>
                                        <exclude>**</exclude>
                                    </excludes>
                                </filter>
                            </filters>
                            <promoteTransitiveDependencies>true</promoteTransitiveDependencies>
                            <createDependencyReducedPom>true</createDependencyReducedPom>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>

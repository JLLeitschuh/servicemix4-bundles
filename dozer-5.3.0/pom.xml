<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!--

        Licensed to the Apache Software Foundation (ASF) under one or more
        contributor license agreements.  See the NOTICE file distributed with
        this work for additional information regarding copyright ownership.
        The ASF licenses this file to You under the Apache License, Version 2.0
        (the "License"); you may not use this file except in compliance with
        the License.  You may obtain a copy of the License at

           http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
    -->

    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.apache.servicemix.bundles</groupId>
        <artifactId>bundles-pom</artifactId>
        <version>5</version>
        <relativePath>../bundles-pom/pom.xml</relativePath>        
    </parent>

    <groupId>org.apache.servicemix.bundles</groupId>
    <artifactId>org.apache.servicemix.bundles.dozer</artifactId>
    <packaging>bundle</packaging>
    <version>5.3.0_2-SNAPSHOT</version>
    <name>Apache ServiceMix :: Bundles :: ${pkgArtifactId}</name>
    <description>
        SYNOPSIS
            This OSGi bundle wraps ${pkgArtifactId} ${pkgVersion} jar file.

        DESCRIPTION
            Dozer is a Java Bean to Java Bean mapper that recursively copies data from one object to another.
            Typically, these Java Beans will be of different complex types.

            Dozer supports simple property mapping, complex type mapping, bi-directional mapping, implicit-explicit mapping,
            as well as recursive mapping. This includes mapping collection attributes that also need mapping at the element
            level.

            Dozer not only supports mapping between attribute names, but also automatically converting between types.
            Most conversion scenarios are supported out of the box, but Dozer also allows you to specify custom conversions
            via XML.

            The mapper is used any time you need to take one type of Java Bean and map it to another type of Java Bean.
            Most field mapping can be done automatically by Dozer using reflection, but any custom mapping can be
            predescribed in XML format. Mapping is bi-directional so only one relationship between classes needs defining.
            If any property names on both objects are the same you do not even need to do any explicit property mapping for
            these fields.

        SEE ALSO
            http://dozer.sourceforge.net/
    </description>

    <properties>
        <pkgGroupId>net.sf.dozer</pkgGroupId>
        <pkgArtifactId>dozer</pkgArtifactId>
        <pkgVersion>5.3.0</pkgVersion>
        <servicemix.osgi.export.pkg>
            org.dozer
        </servicemix.osgi.export.pkg>
        <servicemix.osgi.import.pkg>
            !org.dozer*,
            javax.management,
            javax.xml.datatype,
            javax.xml.parsers,
            org.apache.commons.beanutils;version="[1.7,2)",
            org.apache.commons.beanutils.converters;version="[1.7,2)",
            org.apache.commons.collections;version="3.2",
            org.apache.commons.collections.map;version="3.2",
            org.apache.commons.collections.set;version="3.2",
            org.apache.commons.lang;version="2.4",
            org.apache.commons.lang.builder;version="2.4",
            org.apache.commons.logging,
            org.springframework.beans.factory,
            org.springframework.core.io,
            org.w3c.dom,
            org.xml.sax,
            org.xml.sax.helpers,
            org.hibernate.proxy;resolution:=optional,
            *
        </servicemix.osgi.import.pkg>
    </properties>

    <dependencies>
        <dependency>
            <groupId>${pkgGroupId}</groupId>
            <artifactId>${pkgArtifactId}</artifactId>
            <version>${pkgVersion}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <artifactSet>
                                <includes>
                                    <include>${pkgGroupId}:${pkgArtifactId}</include>
                                </includes>
                            </artifactSet>
                            <filters>
                                <filter>
                                    <artifact>${pkgGroupId}:${pkgArtifactId}</artifact>
                                    <excludes>
                                        <exclude>**</exclude>
                                    </excludes>
                                </filter>
                            </filters>
                            <promoteTransitiveDependencies>true</promoteTransitiveDependencies>
                            <createDependencyReducedPom>true</createDependencyReducedPom>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <!--

        Licensed to the Apache Software Foundation (ASF) under one or more
        contributor license agreements.  See the NOTICE file distributed with
        this work for additional information regarding copyright ownership.
        The ASF licenses this file to You under the Apache License, Version 2.0
        (the "License"); you may not use this file except in compliance with
        the License.  You may obtain a copy of the License at

           http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
    -->

    <modelVersion>4.0.0</modelVersion>

    <parent>
	    <groupId>org.apache.servicemix.bundles</groupId>
	    <artifactId>bundles-pom</artifactId>
	    <version>4</version>
    </parent>

    <groupId>org.apache.servicemix.bundles</groupId>
    <artifactId>org.apache.servicemix.bundles.bcel</artifactId>
    <packaging>bundle</packaging>
    <version>5.2_4-SNAPSHOT</version>
    <name>Apache ServiceMix :: Bundles :: ${pkgArtifactId}</name>
    <description>
        SYNOPSIS
            This OSGi bundle wraps ${pkgArtifactId} ${pkgVersion} jar file.

        DESCRIPTION
            The Byte Code Engineering Library (BCEL) is intended to give users a convenient possibility to analyze,
            create, and manipulate (binary) Java class files (those ending with .class). Classes are represented by
            objects which contain all the symbolic information of the given class: methods, fields and byte code
            instructions, in particular.

            Such objects can be read from an existing file, be transformed by a program (e.g. a class loader at
            run-time) and dumped to a file again. An even more interesting application is the creation of classes
            from scratch at run-time.
            The Byte Code Engineering Library (BCEL) may be also useful if you want to learn about the Java Virtual
            Machine (JVM) and the format of Java .class files.

            BCEL contains a byte code verifier named JustIce, which usually gives you much better information about
            what's wrong with your code than the standard JVM message.

            BCEL is already being used successfully in several projects such as compilers, optimizers, obsfuscators,
            code generators and analysis tools. Unfortunately there hasn't been much development going on over the past
            few years. Feel free to help out or you might want to have a look into the ASM project at objectweb.

        SEE ALSO
            http://jakarta.apache.org/bcel/
    </description>

    <properties>
        <pkgGroupId>org.apache.bcel</pkgGroupId>
        <pkgArtifactId>bcel</pkgArtifactId>
        <pkgVersion>5.2</pkgVersion>
        <servicemix.osgi.export.pkg>
            org.apache.bcel
        </servicemix.osgi.export.pkg>
        <servicemix.osgi.import.pkg>
            !org.apache.bcel*,
            javax.swing*;resolution:=optional,
            *
        </servicemix.osgi.import.pkg>
    </properties>

    <dependencies>
        <dependency>
            <groupId>${pkgGroupId}</groupId>
            <artifactId>${pkgArtifactId}</artifactId>
            <version>${pkgVersion}</version>
            <optional>true</optional>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <artifactSet>
                                <includes>
                                    <include>${pkgGroupId}:cglib-nodep</include>
                                </includes>
                            </artifactSet>
                            <filters>
                                <filter>
                                    <artifact>${pkgGroupId}:cglib-nodep</artifact>
                                    <excludes>
                                        <exclude>**</exclude>
                                    </excludes>
                                </filter>
                            </filters>
                            <promoteTransitiveDependencies>true</promoteTransitiveDependencies>
                            <createDependencyReducedPom>true</createDependencyReducedPom>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>

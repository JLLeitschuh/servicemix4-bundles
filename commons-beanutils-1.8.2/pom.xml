<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <!--

        Licensed to the Apache Software Foundation (ASF) under one or more
        contributor license agreements.  See the NOTICE file distributed with
        this work for additional information regarding copyright ownership.
        The ASF licenses this file to You under the Apache License, Version 2.0
        (the "License"); you may not use this file except in compliance with
        the License.  You may obtain a copy of the License at

           http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
    -->

    <modelVersion>4.0.0</modelVersion>

    <parent>
	    <groupId>org.apache.servicemix.bundles</groupId>
	    <artifactId>bundles-pom</artifactId>
	    <version>5-SNAPSHOT</version>
        <relativePath>../bundles-pom/pom.xml</relativePath>        
    </parent>

    <groupId>org.apache.servicemix.bundles</groupId>
    <artifactId>org.apache.servicemix.bundles.commons-beanutils</artifactId>
    <version>1.8.2_2-SNAPSHOT</version>
    <packaging>bundle</packaging>
    <name>Apache ServiceMix :: Bundles :: ${pkgArtifactId}</name>
    <description>
        SYNOPSIS
            This OSGi bundle wraps ${pkgArtifactId} ${pkgVersion} jar file.

        DESCRIPTION
            Most Java developers are used to creating Java classes that conform to the JavaBeans naming patterns for
            property getters and setters. It is natural to then access these methods directly, using calls to the
            corresponding getXxx and setXxx methods. However, there are some occasions where dynamic access to Java
            object properties (without compiled-in knowledge of the property getter and setter methods to be called)
            is needed. Example use cases include:

            * Building scripting languages that interact with the Java object model (such as the Bean Scripting
              Framework).
            * Building template language processors for web presentation and similar uses (such as JSP or Velocity).
            * Building custom tag libraries for JSP and XSP environments (such as Jakarta Taglibs, Struts, Cocoon).
            * Consuming XML-based configuration resources (such as Ant build scripts, web application deployment
              descriptors, Tomcat's server.xml file).

            The Java language provides Reflection and Introspection APIs (see the java.lang.reflect and java.beans
            packages in the JDK Javadocs). However, these APIs can be quite complex to understand and utilize.
            The BeanUtils component provides easy-to-use wrappers around these capabilities.

        SEE ALSO
            http://commons.apache.org/beanutils/
    </description>

    <properties>
        <pkgGroupId>commons-beanutils</pkgGroupId>
        <pkgArtifactId>commons-beanutils</pkgArtifactId>
        <pkgVersion>1.8.2</pkgVersion>
        <servicemix.osgi.export.pkg>
            org.apache.commons.beanutils
        </servicemix.osgi.export.pkg>
        <servicemix.osgi.import.pkg>
            !org.apache.commons.beanutils*,
            org.apache.commons.collections*;version="[3.0,4)";resolution:=optional,
            org.apache.commons.logging*;version="[1.1,2)",
            *
        </servicemix.osgi.import.pkg>
        <servicemix.osgi.private.pkg>
            org.apache.commons.collections*
        </servicemix.osgi.private.pkg>
    </properties>

    <dependencies>
        <dependency>
            <groupId>${pkgGroupId}</groupId>
            <artifactId>${pkgArtifactId}</artifactId>
            <version>${pkgVersion}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <artifactSet>
                                <includes>
                                    <include>${pkgGroupId}:${pkgArtifactId}</include>
                                </includes>
                            </artifactSet>
                            <filters>
                                <filter>
                                    <artifact>${pkgGroupId}:${pkgArtifactId}</artifact>
                                    <excludes>
                                        <exclude>**</exclude>
                                    </excludes>
                                </filter>
                            </filters>
                            <promoteTransitiveDependencies>true</promoteTransitiveDependencies>
                            <createDependencyReducedPom>true</createDependencyReducedPom>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>

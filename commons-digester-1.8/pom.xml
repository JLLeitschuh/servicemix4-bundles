<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <!--

        Licensed to the Apache Software Foundation (ASF) under one or more
        contributor license agreements.  See the NOTICE file distributed with
        this work for additional information regarding copyright ownership.
        The ASF licenses this file to You under the Apache License, Version 2.0
        (the "License"); you may not use this file except in compliance with
        the License.  You may obtain a copy of the License at

           http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
    -->

    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.apache.servicemix.bundles</groupId>
        <artifactId>bundles-pom</artifactId>
        <version>5</version>
        <relativePath>../bundles-pom/pom.xml</relativePath>        
    </parent>

    <groupId>org.apache.servicemix.bundles</groupId>
    <artifactId>org.apache.servicemix.bundles.commons-digester</artifactId>
    <version>1.8_3-SNAPSHOT</version>
    <packaging>bundle</packaging>
    <name>Apache ServiceMix :: Bundles :: ${pkgArtifactId}</name>
    <description>
        SYNOPSIS
            This OSGi bundle wraps ${pkgArtifactId} ${pkgVersion} jar file.

        DESCRIPTION
            Many projects read XML configuration files to provide initialization of various Java objects within the
            system. There are several ways of doing this, and the Digester component was designed to provide a common
            implementation that can be used in many different projects.

            Basically, the Digester package lets you configure an XML -> Java object mapping module, which triggers
            certain actions called rules whenever a particular pattern of nested XML elements is recognized. A rich set
            of predefined rules is available for your use, or you can also create your own.
            Advanced features of Digester include:

            * Ability to plug in your own pattern matching engine, if the standard one is not sufficient for your
              requirements.
            * Optional namespace-aware processing, so that you can define rules that are relevant only to a particular
              XML namespace.
            * Encapsulation of Rules into RuleSets that can be easily and conveniently reused in more than one
              application that requires the same type of processing.

            Starting from release 2.1, the Digester supports Java5 Annotations definition of rules improving
            maintainability of both Java code and XML documents, since rules are now defined in POJOs and Digester
            parser instances can be generated at run-time, avoiding manual updates.

        SEE ALSO
            http://commons.apache.org/digester/
    </description>

    <properties>
        <pkgGroupId>commons-digester</pkgGroupId>
        <pkgArtifactId>commons-digester</pkgArtifactId>
        <pkgVersion>1.8</pkgVersion>
        <servicemix.osgi.export.pkg>
            org.apache.commons.digester
        </servicemix.osgi.export.pkg>
        <servicemix.osgi.import.pkg>
            !org.apache.commons.digester*,
            *
        </servicemix.osgi.import.pkg>
    </properties>

    <dependencies>
        <dependency>
            <groupId>${pkgGroupId}</groupId>
            <artifactId>${pkgArtifactId}</artifactId>
            <version>${pkgVersion}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <artifactSet>
                                <includes>
                                    <include>${pkgGroupId}:${pkgArtifactId}</include>
                                </includes>
                            </artifactSet>
                            <filters>
                                <filter>
                                    <artifact>${pkgGroupId}:${pkgArtifactId}</artifact>
                                    <excludes>
                                        <exclude>**</exclude>
                                    </excludes>
                                </filter>
                            </filters>
                            <promoteTransitiveDependencies>true</promoteTransitiveDependencies>
                            <createDependencyReducedPom>true</createDependencyReducedPom>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
